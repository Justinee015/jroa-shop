// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  userName  String    @unique @db.VarChar(50)
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  delFlg    String    @default("0") @db.VarChar(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relations
  orders    Order[]
  cart      Cart?
  addresses Address[]
}

model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  zip     String
  country String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId String?
  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  items   OrderItem[]
  payment Payment?
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  createdAt DateTime      @default(now())

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH
  GCASH
  MAYA
}
